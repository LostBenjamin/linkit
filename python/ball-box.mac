# ----------------------------------------------------------------
# Boxes of Balls animation v0.0 2-0-19 
# ----------------------------------------------------------------

# background types: dotted white, dotted color, dotted colors

# ball types: white, two dots, three dots, black, three dots black in the middle, three dots rotating, carry color, static


%include symbols
%include hsl-sequencer

$draw-mode <DRAW-WRITE>
$brightness <BRIGHTNESS-AUTO>
$render-time <ball-time>
$fade-rate 9000
$ball-time 25
$box-width 15
$box-time 50
$num-boxes 3
$balls-per-box 1
$box-instance-time 30
$ball-instance-time 10
$refresh-time 25
$box-sequencer swing-sequencer
$ball-sequencer swing-sequencer
$box-step 0
$ball-step 0

$bgtype-none 0
$bgtype-line 1
$bgtype-points 2
$bgtype-darkgray 3
$bgtype-color-points 4
$bgtype-dotted 5
$bgtype-color-dotted 6
$bgtype-color-dotted-dual 7

# this is too loud and not pretty
$bgtype-palette 8

# these aren't compatible with frame animation because 
# the rendered output keeps being put back where it belongs
$bgtype-rotate 9
$bgtype-mirror 10

# these are too slow
$bgtype-points-alt 11
$bgtype-color-points-alt 12

$background-type <bgtype-line>
$use-computed-value False
$palette-bg-zoom 3
$fgtype-palette 0
$fgtype-palette2 1
$fgtype-white 2
$fgtype-black 3
$fgtype-darken 4
$fgtype-brighten 5

$foreground-type <fgtype-palette2>

#$background-darkening-heavy <MEDIUM>
#$background-darkening-light <LIGHT>
#$background-darkening-none <NONE>
$background-darkening  `<NONE> if <balls-per-box> == 0 else <MEDIUM>`
$background-darkening2 `<VERY-LIGHT> if <balls-per-box> == 0 else <LIGHT>`

%allow-mutability
$HSL-ANGLE 60 #`int(360/(<num-boxes>*<balls-per-box>))`

%play-macro app

# ------------------------------------------
# main app macro
# ------------------------------------------

[app 10]
    start-application

<<< <draw-mode> != <DRAW-WRITE> 
    # set the preset draw mode
    <draw-mode>
    set-draw-mode
>>>

<<< <brightness> != <BRIGHTNESS-AUTO>
    # set the preset brightness level
    <brightness>
    set-brightness
>>>

    # multi macro replaced with a macro run to a 
    # new macro that will run each start-up macro
    [[[box-start <num-boxes>]]]

    # schedule animation rendering
    (boxes-render <render-time>)

    # schuedule display refreshing
    (render <refresh-time>)

    # start the color palette cycling
    (hsl-sequencer-start)


# ------------------------------------------
# main app animation rendering
# ------------------------------------------

[boxes-render]
    <FAST-ERASE-BUFFER>
    erase-buffer

    # multi macro replaced with a macro run to a 
    # new macro that will run each render macro
    [[[box-render <num-boxes>]]]


# ------------------------------------------
# create animation objects
# ------------------------------------------

# expand box template per number of boxes
(((box <num-boxes> `<box-instance-time>*INSTANCE+<box-time>` <box-width> `<NUM-LEDS>-<box-width>` <box-sequencer>)))

<<< <balls-per-box> > 0
# expand template to place ball-creating meta templates for each box
(((create-balls-for-box <num-boxes>)))


# template for adding ball-creating meta templates
[[create-balls-for-box BOX
    # meta template to create ball(s) for a box
    (((ball <balls-per-box> BOX `<num-boxes>*INSTANCE*<ball-instance-time>+<ball-time>` <box-width> <ball-sequencer> `BOX+INSTANCE+<RED>`)))
]]
>>>

# ------------------------------------------
# box template - manages a moving region
# object that has child objects
# ------------------------------------------

[[box INSTANCE SCHEDULE WIDTH MAX SEQ-TYPE

<<< <balls-per-box> > 0
    # expand meta template to run all ball start macros
    [box-start-balls-INSTANCE]
        (((ball-start-all <balls-per-box> INSTANCE)))
>>>
    # start this box instance
    [box-start-INSTANCE]
        # create this box's position sequencer
        {seq-box-INSTANCE}, MAX
        SEQ-TYPE

<<< <balls-per-box> > 0
        # run the ball start macros
        (box-start-balls-INSTANCE)
>>>

        # schedule this box's animation rendering
        (box-step-INSTANCE SCHEDULE)

    # advance this box forwar one animation step
    [box-step-INSTANCE]
        {seq-box-INSTANCE},<GET-NEXT>,<box-step>
        advance-sequence

<<< <background-type> != <bgtype-none>
    # macro to draw the box background
    [box-background-INSTANCE]
        # push the instance as a palette color onto the stack
        INSTANCE
        store

        # run the background drawing macro
        {{
          (box-draw-background)
        }}
>>>

    # render this box instance and its child objects        
    [box-render-INSTANCE]
<<< <background-type> != <bgtype-none>
        # set the viewport to the box bounds
        (box-set-window-INSTANCE)

        # render the background
        (box-background-INSTANCE)
>>>

<<< <balls-per-box> > 0
	# render the foreground
        # meta template expands to run each ball render macro
        (((ball-render-each <balls-per-box> INSTANCE)))
>>>

    # set the viewport to only this box
    [box-set-window-INSTANCE]
        # put the sequencer arguments on the stack

<<< <use-computed-value> == True
        {seq-box-INSTANCE}, <GET-COMPUTED>
>>>
<<< <use-computed-value> == False
        {seq-box-INSTANCE}, <GET-CURRENT>
>>>
        store

        # run the helper macro to set the viewport
        (box-set-viewport)
]]

# ------------------------------------------
# box helper macros
# ------------------------------------------

<<< <background-type> != <bgtype-none>
# multiple types of box backgrounds
# accum0: background palette color
[box-draw-background]
>>>

# draw white points at the box bounds
<<< <background-type> == <bgtype-points>
    white
    <box-width>
    set-position
    white
>>>

# draw white points at the box bounds
<<< <background-type> == <bgtype-points-alt>
    white
    black
    <ENABLE>
    set-reverse
    white
    <DISABLE>
    set-reverse
>>>

# fill the box background with a darkened palette color
<<< <background-type> == <bgtype-line>
    pop
    add-palette-color
    <background-darkening>
    darken    
    <FILL-COLORS>
    fill
>>>

<<< <background-type> == <bgtype-rotate>
    2
    rng
    set-reverse
    rotate
    disable
    set-reverse
>>>

<<< <background-type> == <bgtype-mirror>
    mirror
>>>

<<< <background-type> == <bgtype-darkgray>
    gray
    <background-darkening>
    darken
    <FILL-COLORS>
    fill
>>>

<<< <background-type> == <bgtype-palette>
    <NUM-PALETTE-COLORS>,<PASTE>,<palette-bg-zoom>
    duplicate
>>>

# draw palette color points at the box bounds
<<< <background-type> == <bgtype-color-points>
    recall
    add-palette-color
    <box-width>
    set-position
    recall
    add-palette-color
>>>

# draw palette color points at the box bounds
<<< <background-type> == <bgtype-color-points-alt>
    recall
    add-palette-color
    black
    <ENABLE>
    set-reverse
    recall
    add-palette-color
    <DISABLE>
    set-reverse
>>>

# fill the box background with a dotted darkened palette color
<<< <background-type> == <bgtype-color-dotted>
    pop
    add-palette-color
    <background-darkening>
    darken
    -1,<AUTO-FILL>,-2
    duplicate
>>>

# fill the box background with a dotted darkened palette color
<<< <background-type> == <bgtype-color-dotted-dual>
    pop
    add-palette-color
    <background-darkening>
    darken
    repeat
    <background-darkening2>
    darken
    -2
    duplicate
>>>

# fill the box background with a dotted dark gray
<<< <background-type> == <bgtype-dotted>
    dark-gray
    -1,<AUTO-FILL>,-2
    duplicate
>>>


# set the offset and window to cover the box's current position
# accum0-3: sequence get current value arguments
[box-set-viewport]
    # get the passed sequencer arguments
    recall

    # get the sequence current value
    # this is the box viewport lower bounds
    get-sequence

    # push the lower bounds onto the stack
    store

    # recall the lower bounds as arg0 and the width as arg1
    <box-width>
    recall

    # set both position and width at once
    set-position


# ------------------------------------------
# box helper templates
# ------------------------------------------

# template to place macro runs of the 
# ball start macro for each of a box's balls
[[ball-start-all BALL BOX
    (ball-start-BOX-BALL)
]]

# template to place macro runs of the 
# ball render macro for each of a box's balls
[[ball-render-each BALL BOX
        (ball-render-BOX-BALL)
]]


# ------------------------------------------
# ball template - manages a single
# animated pixel
# ------------------------------------------

[[ball INSTANCE PARENT SCHEDULE WIDTH SEQ-TYPE COLOR

    # start the a specific ball instance
    # for a specific box instance
    [ball-start-PARENT-INSTANCE]
        {seq-ball-PARENT-INSTANCE}, WIDTH
        SEQ-TYPE

        # schedle the ball position updating
        # for a ball instance of a box instance
        (ball-step-PARENT-INSTANCE SCHEDULE)

    # advance to the next ball animation step
    [ball-step-PARENT-INSTANCE]
        {seq-ball-PARENT-INSTANCE},<GET-NEXT>,<ball-step>
        advance-sequence

    # render a specific ball instance of 
    # a specific box instance
    [ball-render-PARENT-INSTANCE]
        (box-set-window-PARENT)

<<< <use-computed-value> == True
        {seq-ball-PARENT-INSTANCE}, <GET-COMPUTED>
>>>
<<< <use-computed-value> == False
        {seq-ball-PARENT-INSTANCE}, <GET-CURRENT>
>>>        
        get-sequence

        set-position
        {{
<<< <foreground-type> == <fgtype-palette>
            COLOR
            add-palette-color
>>>
<<< <foreground-type> == <fgtype-white>
            dark-gray
>>>
<<< <foreground-type> == <fgtype-palette2>
            `COLOR+3`
            add-palette-color
>>>
<<< <foreground-type> == <fgtype-black>
            black
>>>
<<< <foreground-type> == <fgtype-darken>
            2
            darken
>>>
<<< <foreground-type> == <fgtype-brighten>
            2
            brighten
>>>
        }}
]]

