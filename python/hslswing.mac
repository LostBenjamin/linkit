# ----------------------------------------------------------------
# HSL Swing v1.0 6-23-2018
# 3 circular-swinging wanderers with changing colors
# ----------------------------------------------------------------

%version 0					# version zero of the Apollo language (RPN)
%include symbols				# standard device and common use numeric value symbols
%include hsl-sequencer				# script to color-sequence the palette with a changing start angle
%run-macro hslswing-app		 		# run this script's main app when done programming

$max-width-half `<NUM-LEDS> * 1/2`		# set constant for half of the device's total LEDs
$cycle-time 100					# cycle each swinger to the next state every 100 ticks
$render-time 100				# render the display buffer to the LEDs every 100 ticks

# --------------------------------------------
# setup
# --------------------------------------------

[hslswing-app 4]				# start a macro called `hslswing-app` and pre-assign macro #4
	application				# mark this macro as an 'application' to clear and reset the device

	<DRAW-WRITE>				# set the draw mode to overwrite (replace)
	draw-mode

	(render <render-time>)			# schedule the render macro to run periodically
	(init)					# call 'init' macro to set up swingers

# --------------------------------------------

[init]						# define macro 'init' to set up schedules
	(((circular-swingers 2)))		# invoke meta-template 'circular-swingers' to start up th swingers'
                                        	# this expands to: ((circular-swingers 0)) and ((circular-swingers 1))
	(average-swinger)			# start up the averaging swinger
	(hsl-sequencer-start)			# start up the hsl sequencer

# --------------------------------------------

[render !]					# define macro 'render' in the last (truncated) macro # to update the display
	mirror					# duplicate the first half of the LED colors to the second half, reversed
	flush					# push the display buffer to the LEDs

# --------------------------------------------
# circular (sin/cos) swingers
# --------------------------------------------

[[circular-swingers X				# create a template called 'circular-swingers' to call a variable number of macros
	(start-X)				# replace 'X' with the passed value and call the macro name
]]                                              # close the template definition

# --------------------------------------------

((circular-swinger 0 <RED> sws))		# expand template 'circular-swinger' with values for two swingers
((circular-swinger 1 <GREEN> swc))		# 0, 1: unique name, RED/GREEN palette color index, sws/swc native sequencer type

# --------------------------------------------

[[circular-swinger X COLOR TYPE			# define a template 'circular-swinger' with passed-in values:
						# X (unique name), COLOR (palette color index), TYPE (sequencer type)

	[start-X]				# define templated macro 'start-X' to start up a circulr swinger
		{sequencer-X},<max-width-half>	# allocate a new unique sequencer number; push it along with half the display width
	        TYPE				# create a sequencer per the above pushed arguments

	        (render-X <cycle-time>) 	# schedule the the swinger to advance and draw periodically

	[render-X]				# define a templated macro 'render-X' to handle advancing and drawing the swinger
		<sequencer-X>			# push the above allocated sequencer number onto the argument stack
		sequence-next-window		# advance the swinger to the next position, leaving offset & window on the argument
						# stack, used to draw contigious fast-moving pixels
		position			# set the 'offset' and 'window' for drawing per to the arguments on the stack

		COLOR				# push the passed-in color value (palette color index) to the argument stack
		palette-color			# insert a palette color per the above color index argument
		fast-fade			# apply a fast-to-compute fade to the pixel (uses bit shift for division)

		flood				# flood the set up region with the inserted palette color and fade effect
		reset				# reset the drawing region
]]						# close the template definition

# --------------------------------------------
# averaging (of the above) swinger
# --------------------------------------------

[average-swinger]				# define a macro to set up a third swinger that averages the values of the first two
	{sequencer-a},<NUM-LEDS>		# allocate a unique sequencer number and push it along with the device LED count
        wheel-sequencer				# create a 'wheel sequencer' per the pushed arguments (repeats numbers 0, 1, 2, 3, 0, 1, 2, 3)

        (render-a <cycle-time>)			# schedule the swinger to periodically advance and draw

# --------------------------------------------

[render-a]					# define a macro to advance and draw the swinger
	<sequencer-a>,<MACRO-SEQ>,<math-a>	# push avove sequence number with option to compute macro and macro number 
	sequence-next-window			# get the next contiguous draw region

	position				# set the fill region per the pushed arguments

	<BLUE>					# push the palette color index for the color blue
	palette-color				# insert a palette color per the above color index argument
        fast-fade				# apply a fast-to-compute fade to the pixel (uses bit shift for division)

        flood                           	# flood the set up region with the inserted palette color and fade effect
        reset                         		# reset the drawing region

# --------------------------------------------

[math-a]					# define a macro to compute the swinger position based on the other two swingers
	<sequencer-0>,<GET-COMPUTED>		# push the first circular swinger's sequence number and option to get computed value
	sequence				# get the computed value
	push					# push onto the accumulator stack

	<sequencer-1>,<GET-COMPUTED>		# push the first circular swinger's sequence number and option to get computed value
	sequence				# get the computed value
	push					# push onto the accumulator stack
	average					# average the two values, leave result at head of argument and accumulator stacks

